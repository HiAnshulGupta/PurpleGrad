package com.app.controller;

import java.util.Optional;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.context.config.ConfigDataResourceNotFoundException;
import org.springframework.http.ResponseEntity;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.app.Repository.StudentRepo;

import com.app.model.LoginDTO;
import com.app.model.Register;
import com.app.model.RegisterDTO;
import com.app.register_exceptions.ResourceNotFoundException;

@RestController
@CrossOrigin(origins = "*")
@RequestMapping("/")
public class StudentController {

	@Autowired
	private StudentRepo strepo;

	
	
	@Autowired
	private PasswordEncoder passwordEncoder;
	
	
	@PostMapping("Register")
	public Register insert(@RequestBody Register reg) {
		
		String encPassword = passwordEncoder.encode(reg.getPassword());
		reg.setPassword(encPassword);
		
		return strepo.save(reg);
	}



	

	@PostMapping("login")
	public Register authenticate(LoginDTO lg) {
		
		Register reg=strepo.findByEmail(lg.getEmail()).orElseThrow(()-> 
		new ResourceNotFoundException("Bad Credentials!!!"));
		
		System.out.println("sjfhwejfhj");
		String rawpass=lg.getPassword();
		if(reg!=null && passwordEncoder.matches(rawpass, reg.getPassword()))
			return reg;
		else throw new ResourceNotFoundException("user not registered");
	}
	

	@PostMapping("{id}")
	public ResponseEntity<Register> GetStudent(@PathVariable Long ID) {
		Optional<Register> user = strepo.findById(ID);
		if (user.isPresent()) {
			Register student = user.get();
			return ResponseEntity.ok(student);
		} else {
			return ResponseEntity.notFound().build();
		}
	}

	@DeleteMapping("/{id}")
	public ResponseEntity<Void> deleteStudent(@PathVariable Long id) {
		if (!strepo.existsById(id)) {
			return ResponseEntity.notFound().build();
		}

		// Delete the student from the repository
		strepo.deleteById(id);

		return ResponseEntity.noContent().build();
	}

}
